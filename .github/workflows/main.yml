# This is a basic workflow to help you get started with Actions

name: CI


# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    
    strategy:
      matrix:
        targetplatform: [AnyCPU] #targetplatform: [x86, x64]
  
    # The type of runner that the job will run on
    runs-on: windows-latest

    env:
      App_Packages_Directory: AppPackages
#      SigningCertificate: GitHubActionsDemo.pfx
      Solution_Path: WindowsService1.sln
#      Test_Project_Path: MyWpfApp.Tests\MyWpfApp.Tests.csproj
#      Wpf_Project_Path: MyWpfApp\MyWpfApp.csproj
#      Wap_Project_Directory: MyWpfApp.Package
#      Wap_Project_Name: MyWpfApp.Package.wapproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands
      Configuration: Release
      ZipFileName: WindowsService1.zip

  #  defaults:
   #   run:
    #    working-directory: ./mydirectory
        
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: Checkout Code
      
      # Setup Msbuild
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      
      # Setup NuGet and Restore Packages
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2
        with:
          nuget-api-key: ${{ secrets.NuGetAPIKey }}
          nuget-version: '5.x'
      - run: nuget restore $env:Solution_Path
        
        
      # Build the Solution           
      - name: Build the Solution
        run: msbuild  $env:Solution_Path  /p:Configuration=$env:Configuration -m
      
      - name: Zip It
        run: 7z.exe a $env:ZipFileName  bin\Release
      
 #     - name: Upload Artifact
 #       uses: actions/upload-artifact@v1.0.0
 #       with:
 #          name: published_webapp
 #          path: bin\Release
 
      
      - name: unzip-source
        run: dir && dir bin\Release
            
      - name: test 
        uses: AButler/upload-release-assets@v2.0
        with:
          files: $env:ZipFileName
          repo-token: ${{ secrets.GITHUB_TOKEN }}
 
 
 
 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: New release for ${{ github.ref }}
          draft: false
          prerelease: false
  
 
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./$env:ZipFileName
          asset_name: $env:ZipFileName
          asset_content_type: application/zip
 
 
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          body: New release for ${{ github.ref }}
#          draft: false
#          prerelease: false
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: bin\Release
#          asset_name: published_webapp
#          asset_content_type: application/zip
 
 
 
 
 
 
 


